AWSTemplateFormatVersion: "2010-09-09"
Description: EC2 Instance inside public subnet of VPC with Node installation, DynamoDB Table creation

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName

  ElasticBeanstalkApplication:
    Description: Provide Elastic Beanstalk Frontend Application Name
    Type: String
    
  # VPC Template Reference: https://docs.aws.amazon.com/codebuild/latest/userguide/cloudformation-vpc-template.html
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.0.0/16 

  CognitoUserPoolName:
    Description: Please enter the user pool name for Cognito
    Type: String   
    Default:  Skyline-UserPool

Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false 
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT  
      VerificationMessageTemplate:
        EmailSubjectByLink: 'Skyline: Your verification code' 
        DefaultEmailOption: CONFIRM_WITH_LINK        
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: false
        - Name: phone_number
          Required: true
          Mutable: false     
      UserPoolName: !Ref CognitoUserPoolName
      UsernameAttributes:
        - email
        - phone_number
      UsernameConfiguration:
        CaseSensitive: false

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: skyline
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      Domain: "skyline"
      UserPoolId: !Ref UserPool

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-elasticbeanstalk.html
  ElasticBeanstalkApp:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      ApplicationName: !Ref ElasticBeanstalkApplication
      Description: AWS Elastic Beanstalk application for frontend

  EBApplicationVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      ApplicationName:
        Ref: ElasticBeanstalkApp
      Description: AWS ElasticBeanstalk Application Version
      SourceBundle:
        S3Bucket: !Sub "elasticbeanstalk-frontend"
        S3Key: Dockerrun.aws.json

  EBConfigurationTemplate:
    Type: AWS::ElasticBeanstalk::ConfigurationTemplate
    Properties:
      OptionSettings:
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: IamInstanceProfile
          Value: !Ref InstanceProfile   
      ApplicationName:
        Ref: ElasticBeanstalkApp
      Description: AWS ElasticBeanstalk Configuration Template
      SolutionStackName: "64bit Amazon Linux 2 v3.4.13 running Docker" 

  Environment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties: 
      ApplicationName: !Ref ElasticBeanstalkApp
      Description: "AWS Elastic Beanstalk Environment running Sample Application"
      # EnvironmentName: sample-env
      TemplateName:
        Ref: EBConfigurationTemplate
      VersionLabel:
        Ref: EBApplicationVersion

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-instanceprofile.html
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles: 
        - LabRole     

# VPC Template Reference: https://docs.aws.amazon.com/codebuild/latest/userguide/cloudformation-vpc-template.html
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Name
        Value: vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true          

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
 

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG with port 22, 80 and 443 inbound
      GroupName: server
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  # EC2 Template Reference: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-ec2.html

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c02fb55956c7d316
      InstanceType: t2.nano
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !GetAtt EC2SecurityGroup.GroupId
      SubnetId: !Ref PublicSubnet1

      Tags:
        - Key: Name
          Value: backend
      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum update -y
          curl -sL https://rpm.nodesource.com/setup_lts.x | bash -

          yum install nodejs -y

          sudo amazon-linux-extras install nginx1 -y

          sudo systemctl restart nginx

          sudo chown -R $USER:$USER .

          sudo yum install git -y
          
        # curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash

  ElasticIp:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref EC2Instance
      Domain: vpc

  BookingsTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "bookingid"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "bookingid"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "Bookings"

  RoomsTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "roomnumber"
          AttributeType: "N"
      KeySchema: 
        - 
          AttributeName: "roomnumber"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "Rooms"


  OrdersTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "Bookingid"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "Bookingid"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "Orders"

  FoodTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "menuid"
          AttributeType: "N"
      KeySchema: 
        - 
          AttributeName: "menuid"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "Food"

  HouseKeepingTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "Bookingid"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "Bookingid"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      TableName: "HouseKeeping"
    
Outputs:
  UserPoolId:
    Value: !Ref UserPool
  UserPoolClientId:
    Value: !Ref UserPoolClient  
  VPCID:
    Description: The VPC ID
    Value: !Ref VPC
  PublicSubnet_ID:
    Description: The Public Subnet ID
    Value: !Ref PublicSubnet1
  EC2_ID:
    Description: The EC2 Instance Public IPV4
    Value: !Ref ElasticIp
